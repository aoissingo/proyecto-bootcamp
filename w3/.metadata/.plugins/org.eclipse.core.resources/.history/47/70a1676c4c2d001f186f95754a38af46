package com.banco.client.controller;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.reactive.server.WebTestClient;

import com.banco.client.model.Client;
import com.banco.client.service.ClientServiceLocal;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@WebFluxTest(controllers = ClientController.class)
public class ClientControllerTest {

	@Autowired
	private WebTestClient webTestClient;

	@MockBean
	private ClientServiceLocal clientService;

	@BeforeEach
	void setUp() {
		// No es necesario inicializar WebTestClient manualmente ya que Spring se
		// encarga de esto
	}

	@Test
    void testGetAllClient() {
        Client client = new Client();
        client.setId("1");
        client.setName("Test Client");

        Mockito.when(clientService.getAllClient()).thenReturn(Flux.just(client));

        webTestClient.get().uri("/clients")
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(Client.class)
                .hasSize(1)
                .consumeWith(response -> {
                    List<Client> clients = response.getResponseBody();
                    System.out.println("Response body: " + clients);
                });
    }

	@Test
	void testGetClientById() {
		Client client = new Client();
		client.setId("1");
		client.setName("Test Client");

		Mockito.when(clientService.getClientById(Mockito.anyString())).thenReturn(Mono.just(client));

		webTestClient.get().uri("/clients/{id}", "1").exchange().expectStatus().isOk().expectBody(Client.class)
				.isEqualTo(client);
	}

	@Test
	void testCreateClient() {
		Client client = new Client();
		client.setId("1");
		client.setName("Test Client");

		Mockito.when(clientService.createClient(Mockito.any(Client.class))).thenReturn(Mono.just(client));

		webTestClient.post().uri("/clients").bodyValue(client).exchange().expectStatus().isOk().expectBody(Client.class)
				.isEqualTo(client);
	}

	@Test
	void testUpdateClient() {
		Client client = new Client();
		client.setId("1");
		client.setName("Updated Client");

		Mockito.when(clientService.updateClient(Mockito.anyString(), Mockito.any(Client.class)))
				.thenReturn(Mono.just(client));

		webTestClient.put().uri("/clients/{id}", "1").bodyValue(client).exchange().expectStatus().isOk()
				.expectBody(Client.class).isEqualTo(client);
	}

	@Test
	void testDeleteClient() {
		Mockito.when(clientService.deleteClient(Mockito.anyString())).thenReturn(Mono.empty());

		webTestClient.delete().uri("/clients/{id}", "1").exchange().expectStatus().isOk();
	}
}
